generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  description     String
  imageUrl        String
  name            String
  price           Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  productCartItem ProductCartItem[]

  @@map("products")
}

model Team {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  time         String
  date         String
  teamImg      String
  price        Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  teamCartItem TeamCartItem[]

  @@map("teams")
}

model Cart {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  productCartItem ProductCartItem[]
  teamCartItem    TeamCartItem[]
  userId          String?           @db.ObjectId
  user            User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("carts")
}

model ProductCartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  quantity  Int

  @@map("productCartItems")
}

model TeamCartItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  teamId   String @db.ObjectId
  team     Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  cartId   String @db.ObjectId
  cart     Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  quantity Int

  @@map("teamCartItems")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Cart          Cart[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
